# -*- coding: utf-8 -*-
"""transcribe_qc_aggregation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SWnX3_emt3wqoNOLDdbAvKstpcfTv2Cp
"""

import csv
import pandas as pd
!pip -q install striprtf
from striprtf.striprtf import rtf_to_text
from sklearn.feature_extraction.text import TfidfVectorizer

def get_aggregated_results(mturk_res, worker_scores, num_inputs):
  # returns a list of tuples of the image link and the transcription
  scores = list(worker_scores.items())
  scores.sort(key=lambda tup: tup[1],reverse=True)
  top_worker_id = scores[0][0]
  aggregated_results = []

  worker_ids = mturk_res['WorkerId']
  for i, worker_id in enumerate(worker_ids):
    if worker_id == top_worker_id:
      for j in range(1, num_inputs+1):
        worker_ans = mturk_res[f'Answer.output_{j}'][i]
        image_url = mturk_res[f'Input.input_{j}'][i]
        aggregated_results.append((image_url, worker_ans))

  return aggregated_results

def get_worker_scores(mturk_res, qc_checks):
  # returns the worker simiarity scores
  worker_ids = mturk_res['WorkerId']
  totals = {}
  scores = {}

  for i, worker_id in enumerate(worker_ids):
    if worker_id not in scores.keys():
      totals[worker_id] = 0
    for j in range(1, len(qc_checks)+1):
      worker_ans = mturk_res[f'Answer.qc_output_{j}'][i]
      correct_ans = qc_checks[j-1]
      sim_score = get_similarity(worker_ans, correct_ans)
      totals[worker_id] += sim_score

  for worker_id, total in totals.items():
    scores[worker_id] = total / len(qc_checks)

  return scores

def get_similarity(text1, text2):
  #returns percentage of similarity between two texts
  tfidf = TfidfVectorizer()
  vecs = tfidf.fit_transform([text1, text2])
  corr_matrix = ((vecs * vecs.T).A)
  similarity = corr_matrix[0,1]
  return similarity

def main():
  mturk_res = pd.read_csv('data/transcribe/sample_output_transcribe.csv')
  
  num_qcs = 3 # number of quality control checks included
  qc_checks = []
  # Read in positive quality control answers from rtf file 
  for i in range(1, num_qcs+1):
    with open(f'data/transcribe/qc_output_{i}_check.rtf', 'r') as file:
      rtf = file.read()
      text = rtf_to_text(rtf)
      qc_checks.append(text)


  num_inputs = 7 # number of non-quality control inputs
  worker_scores = get_worker_scores(mturk_res, qc_checks)
  aggregated_results = get_aggregated_results(mturk_res, worker_scores, num_inputs)
  with open('transcribe_aggregated_output.csv','w') as output_file:
    writer = csv.writer(output_file)
    writer.writerow(['image_url', 'worker_transcription'])
    for row in aggregated_results:
      writer.writerow(row)

if __name__ == '__main__':
    main()